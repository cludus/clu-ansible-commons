- name: install curl and openssl
  ansible.builtin.package:
    name:
      - curl
      - openssl
      - yq
      - open-iscsi
      - nfs-utils
      - cryptsetup
      - device-mapper
      - findmnt
  become: true

- name: copy mount
  ansible.builtin.copy:
    src: shared-mount.start
    dest: /etc/local.d/shared-mount.start
    mode: '0700'
  when: ansible_facts['distribution'] == "Alpine"
  register: shared-mount

- name: restart on resolv.conf added
  ansible.builtin.reboot:
  when: shared-mount.changed

- name: ensure local service is enabled and started at boot
  ansible.builtin.service:
    name: local
    enabled: true
    state: started

- name: check k3s
  ansible.builtin.command: k3s
  ignore_errors: true
  changed_when: k3s_check.rc > 1
  register: k3s_check

- name: debug msg 1
  debug:
    msg: k3s not installed on {{ inventory_hostname }}
  when: k3s_check.rc > 1

- name: uninstall
  ansible.builtin.raw: |
    /usr/local/bin/k3s-uninstall.sh
  when: hostvars[inventory_hostname].k3s.uninstall

- name: Create tls directory
  ansible.builtin.file:
    path: /var/lib/rancher/k3s/server/tls
    state: directory
    mode: '0755'
  when: k3s_check.rc > 1

- name: upload ssl crt
  copy:
    src: "{{ hostvars[inventory_hostname].k3s.root_ca_path }}"
    dest: /var/lib/rancher/k3s/server/tls/root-ca.pem
    decrypt: yes
    mode: 0600
  when: k3s_check.rc > 1

- name: upload ssl key
  copy:
    src: "{{ hostvars[inventory_hostname].k3s.root_ca_key_path }}"
    dest: /var/lib/rancher/k3s/server/tls/root-ca.key
    decrypt: yes
    mode: 0600
  when: k3s_check.rc > 1

- name: create ca certs
  ansible.builtin.shell: curl -sfL https://github.com/k3s-io/k3s/raw/master/contrib/util/generate-custom-ca-certs.sh | {{ (ansible_facts['distribution'] == "Alpine")|ternary('sh', 'bash') }} -s -
  when: k3s_check.rc > 1

- name: install k3s master
  ansible.builtin.raw: |
    curl -sfL https://get.k3s.io | INSTALL_K3S_EXEC="server" {{ (ansible_facts['distribution'] == "Alpine")|ternary('sh', 'bash') }} -s - \
      --node-external-ip={{ hostvars[inventory_hostname].k3s.ip }} \
      --bind-address={{ hostvars[inventory_hostname].k3s.ip }} \
      --kube-proxy-arg="bind-address={{ hostvars[inventory_hostname].k3s.ip }}" \
      --kubelet-arg="node-ip={{ hostvars[inventory_hostname].k3s.ip }}" \
      --tls-san {{ hostvars[inventory_hostname].k3s.hostname }} \
      --token {{ hostvars[inventory_hostname].k3s.cluster_token }} \
      --cluster-init \
      --write-kubeconfig-mode 644 \
      --disable traefik \
      --disable servicelb \
      --node-ip {{ hostvars[inventory_hostname].k3s.ip }} \
      --node-taint node-role.kubernetes.io/master=true:NoSchedule
  become: true
  when: k3s_check.rc > 1 and hostvars[inventory_hostname].k3s.node_type == "master"
  register: k3s_install

- name: install k3s server
  ansible.builtin.raw: curl -sfL https://get.k3s.io | INSTALL_K3S_EXEC="server" {{ (ansible_facts['distribution'] == "Alpine")|ternary('sh', 'bash') }} -s - \
      --node-external-ip={{ hostvars[inventory_hostname].k3s.ip }} \
      --bind-address={{ hostvars[inventory_hostname].k3s.ip }} \
      --kube-proxy-arg="bind-address={{ hostvars[inventory_hostname].k3s.ip }}" \
      --kubelet-arg="node-ip={{ hostvars[inventory_hostname].k3s.ip }}" \
      --tls-san {{ hostvars[inventory_hostname].k3s.hostname }} \
      --token {{ hostvars[inventory_hostname].k3s.cluster_token }} \
      --server https://{{ hostvars[inventory_hostname].k3s.master_server }}:6443 \
      --write-kubeconfig-mode 644 \
      --disable traefik \
      --disable servicelb \
      --node-ip {{ hostvars[inventory_hostname].k3s.ip }} \
      --node-taint node-role.kubernetes.io/master=true:NoSchedule
  become: true
  when: k3s_check.rc > 1 and hostvars[inventory_hostname].k3s.node_type == "server"
  register: k3s_install

- name: install k3s agent
  ansible.builtin.raw: curl -sfL https://get.k3s.io | INSTALL_K3S_EXEC="agent" {{ (ansible_facts['distribution'] == "Alpine")|ternary('sh', 'bash') }} -s - \
    --node-external-ip={{ hostvars[inventory_hostname].k3s.ip }} \
    --bind-address={{ hostvars[inventory_hostname].k3s.ip }} \
    --kube-proxy-arg="bind-address={{ hostvars[inventory_hostname].k3s.ip }}" \
    --kubelet-arg="node-ip={{ hostvars[inventory_hostname].k3s.ip }}" \
    --token {{ hostvars[inventory_hostname].k3s.cluster_token }} \
    --server https://{{ hostvars[inventory_hostname].k3s.master_server }}:6443 \
    --node-ip {{ hostvars[inventory_hostname].k3s.ip }} \
    --node-label="disk_type={{ hostvars[inventory_hostname].k3s.disk_type }}"
  register: k3s_install
  when: k3s_check.rc > 1 and hostvars[inventory_hostname].k3s.node_type == "agent"

- name: reboot when k3s is installed
  ansible.builtin.reboot:
  when: k3s_install.changed

- name: edit cluster configuration
  ansible.builtin.shell: |
    yq '.clusters[0].cluster.server |= "https://{{ hostvars[inventory_hostname].k3s.hostname }}:6443"' /etc/rancher/k3s/k3s.yaml > /etc/rancher/k3s/config.yaml
  when: hostvars[inventory_hostname].k3s.node_type == "master"

- name: storing in a path relative to the playbook
  ansible.builtin.fetch:
    src: /etc/rancher/k3s/config.yaml
    dest: "{{ hostvars[inventory_hostname].k3s.config_dir }}/{{ hostvars[inventory_hostname].k3s.cluster_name }}.yml"
    flat: yes
  when: hostvars[inventory_hostname].k3s.node_type == "master"