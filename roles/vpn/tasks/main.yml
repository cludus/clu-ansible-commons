- name: enable ip forwarding
  ansible.posix.sysctl:
    name: net.ipv4.ip_forward
    value: '1'
    sysctl_set: true
    state: present
    reload: true

- name: install wireguard-tools
  ansible.builtin.package:
    name:
      - wireguard-tools
    update_cache: true
    state: latest
  when: ansible_facts['distribution'] == "Alpine"

- name: install wireguard
  ansible.builtin.package:
    name:
      - wireguard
    update_cache: true
    state: latest
  when: ansible_facts['distribution'] == "Ubuntu"

- name: check if vpn service exists
  stat:
    path: "/etc/init.d/wg-quick-wg0"
  register: service_status
  when: ansible_facts['distribution'] == "Alpine"

#- name: stop service
#  ansible.builtin.service:
#    name: wg-quick-wg0
#    enabled: yes
#    state: stopped
#  when: ansible_facts['distribution'] == "Alpine" and service_status.stat.exists

- name: get private key
  command: "{{ hostvars[inventory_hostname].vpn.private_key }}"
  register: private_key
  become: false
  delegate_to: localhost

- name: get public key
  command: "{{ hostvars[item.name].vpn.public_key }}"
  register: public_key
  become: false
  delegate_to: localhost
  loop: "{{ hostvars[inventory_hostname].vpn.peers }}"

#- name: display a variable
#  debug:
#    var: public_key

- name: create wireguard config
  template:
    dest: /etc/wireguard/wg0.conf
    src: wg.conf.j2
    owner: root
    group: root
    mode: '0600'

- name: create wireguard service
  template:
    dest: /etc/init.d/wg-quick-wg0
    src: wg-quick.j2
    owner: root
    group: root
    mode: '0700'
  when: ansible_facts['distribution'] == "Alpine"

- name: start service alpine
  ansible.builtin.service:
    name: wg-quick-wg0
    enabled: yes
    state: started
  when: ansible_facts['distribution'] == "Alpine"

- name: start service ubuntu
  systemd:
    name: wg-quick@wg0
    enabled: yes
    state: restarted
  when: ansible_facts['distribution'] == "Ubuntu"